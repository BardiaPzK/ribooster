name: Build and Deploy (Minimal Admin Login)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  BACKEND_APP_NAME: ${{ secrets.BACKEND_APP_NAME }}    # ribooster-api-prod
  FRONTEND_APP_NAME: ${{ secrets.FRONTEND_APP_NAME }}  # ribooster-web-prod

  # Backend settings
  APP_ENV: "prod"
  LOG_LEVEL: "INFO"
  API_SECRET: "ribooster-secret-001"
  ADMIN_ACCESS_CODE: "admin"
  ADMIN_USERS: "admin:Torodi1992,admin2:Torodi1992"
  CORS_ALLOW_ORIGINS: '["https://ribooster-web-prod.azurewebsites.net"]'
  WEBSITES_PORT: "80"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set subscription
        run: az account set --subscription "$AZURE_SUBSCRIPTION_ID"

      - name: ACR login
        run: az acr login --name "$ACR_NAME"

      - name: Prepare tags
        id: prep
        run: |
          echo "backend_image=${{ env.ACR_LOGIN_SERVER }}/ribooster-backend-min:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ env.ACR_LOGIN_SERVER }}/ribooster-frontend-min:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "backend_latest=${{ env.ACR_LOGIN_SERVER }}/ribooster-backend-min:latest" >> $GITHUB_OUTPUT
          echo "frontend_latest=${{ env.ACR_LOGIN_SERVER }}/ribooster-frontend-min:latest" >> $GITHUB_OUTPUT

      - name: Build & Push Backend
        run: |
          docker build -t ${{ steps.prep.outputs.backend_image }} -t ${{ steps.prep.outputs.backend_latest }} ./backend
          docker push ${{ steps.prep.outputs.backend_image }}
          docker push ${{ steps.prep.outputs.backend_latest }}

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ steps.prep.outputs.frontend_image }} -t ${{ steps.prep.outputs.frontend_latest }} ./frontend
          docker push ${{ steps.prep.outputs.frontend_image }}
          docker push ${{ steps.prep.outputs.frontend_latest }}

      - name: Configure Backend App Settings
        run: |
          az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$BACKEND_APP_NAME" --settings \
            APP_ENV="${APP_ENV}" LOG_LEVEL="${LOG_LEVEL}" API_SECRET="${API_SECRET}" \
            ADMIN_ACCESS_CODE="${ADMIN_ACCESS_CODE}" ADMIN_USERS="${ADMIN_USERS}" \
            CORS_ALLOW_ORIGINS='${CORS_ALLOW_ORIGINS}' WEBSITES_PORT="${WEBSITES_PORT}"

      - name: Configure Frontend App Settings
        run: |
          BACKEND_URL="https://${BACKEND_APP_NAME}.azurewebsites.net"
          az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$FRONTEND_APP_NAME" --settings \
            BACKEND_URL="${BACKEND_URL}" WEBSITES_PORT="${WEBSITES_PORT}"

      - name: Update Backend Image
        run: |
          az webapp config container set -g "$AZURE_RESOURCE_GROUP" -n "$BACKEND_APP_NAME" \
            --docker-custom-image-name "${{ steps.prep.outputs.backend_image }}" \
            --docker-registry-server-url "https://${ACR_LOGIN_SERVER}"

      - name: Update Frontend Image
        run: |
          az webapp config container set -g "$AZURE_RESOURCE_GROUP" -n "$FRONTEND_APP_NAME" \
            --docker-custom-image-name "${{ steps.prep.outputs.frontend_image }}" \
            --docker-registry-server-url "https://${ACR_LOGIN_SERVER}"

      - name: Restart apps
        run: |
          az webapp restart -g "$AZURE_RESOURCE_GROUP" -n "$BACKEND_APP_NAME"
          az webapp restart -g "$AZURE_RESOURCE_GROUP" -n "$FRONTEND_APP_NAME"
